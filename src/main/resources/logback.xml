<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="false" debug="false"> 
    <!-- <configuration> -->
    <!-- <property name="LOG_HOME" value="/logs" /> -->
    <conversionRule conversionWord="expRoot"
                    converterClass="com.apptium.eportalutility.exception.logger.conversion.EportalExceptionConverter" />

    <conversionRule conversionWord="uuid"
                    converterClass="com.apptium.eportalutility.exception.logger.conversion.UUIDConverter" />
    
    <springProperty scope="context" name="spring.application.name" source="spring.application.name"
                    defaultValue="eportal-eventstore"/>
    <!-- definition of appender STDOUT -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss} %-5level [%thread] %logger - %M - %L
                : %msg %n</pattern>
        </encoder>
    </appender>
   
   <!--  <appender name="FILE"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_HOME}/eportal-eventstore.log</file>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <Pattern>
                %d{yyyy-MM-dd HH:mm:ss} %-5level [%thread] %logger - %M - %L
                : %msg%n
            </Pattern>
        </encoder>

        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            rollover daily
            <fileNamePattern>${LOG_HOME}/eportal-eventstore.%d{yyyy-MM-dd}.%i.log
            </fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy
                    class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>5MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
    </appender>
 -->
   <!--  <appender name="fileErrorCode"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_HOME}/eportal-eventstore-code.log</file>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <Pattern>
                %d{yyyy-MM-dd HH:mm:ss} %-5level [%thread] %logger - %M - %L
                :trackId=%X{trackId}|uuid=%X{uuid}|accountName=%X{accountName}|appName=%X{appName}|userName=%X{userName}|exceptionIssueCode=%X{exceptionIssueCode} %expRoot %n
            </Pattern>
        </encoder>

        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            rollover daily
            <fileNamePattern>${LOG_HOME}/eportal-eventstore-code.%d{yyyy-MM-dd}.%i.log
            </fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy
                    class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>5MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
    </appender>
 -->
    <appender name="FILE"
			  class="ch.qos.logback.core.rolling.RollingFileAppender">
		<file>${LOG_HOME}/${LOG_FILE_NAME}.log</file>
		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<Pattern>
			%d{yyyy-MM-dd HH:mm:ss} %-5level [%thread] %logger - %M - %L
				:trackId=%X{trackId}|uuid=%uuid|accountName=%X{accountName}|appName=%X{appName}|userName=%X{userName}|exceptionIssueCode=%expRoot|
				:exception=%ex %n
			</Pattern>
		</encoder>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- rollover daily -->
			<fileNamePattern>${LOG_HOME}/${LOG_FILE_NAME}.%d{yyyy-MM-dd}.%i.log
			</fileNamePattern>
			<timeBasedFileNamingAndTriggeringPolicy
					class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<maxFileSize>${MAX_FILESIZE}</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
			<!-- keep n days' worth of history -->
			<maxHistory>${MAX_HISTORY}</maxHistory>
		</rollingPolicy>
	</appender>

    <appender name="LOGSTASH" class="net.logstash.logback.appender.LogstashTcpSocketAppender">
        <destination>${LOGSTASH_IP}:${LOGSTASH_PORT}</destination>

        <encoder class="net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder">
            <providers>
                <mdc/> <!-- MDC variables on the Thread will be written as JSON fields-->
                <context/> <!--Outputs entries from logback's context -->
                <version/> <!-- Logstash json format version, the @version field in the output-->
                <logLevel/>
                <loggerName/>

                <pattern>
                    <pattern> <!-- we can add some custom fields to be sent with all the log 
					entries.     -->
                        {
                        "uuid" : "%uuid",
                        "expRoot" : "%expRoot", 
                        "micro-service" : "${spring.application.name}"
                        }
                    </pattern>
                </pattern>

                <threadName/>
                <message/>

                <logstashMarkers/> <!-- Useful so we can add extra information for specific log lines as Markers-->
                <arguments/> <!--or through StructuredArguments-->

                <stackTrace/>
            </providers>
        </encoder>
    </appender>
    
    <logger name="org.springframework" level="${ROOTLOGGERLEVEL:-ERROR}" additivity="false">
        <appender-ref ref="STDOUT"/>
    </logger>

    <logger name="org.springframework.data" level="${ROOTLOGGERLEVEL:-ERROR}" additivity="false">
        <appender-ref ref="STDOUT"/>
    </logger> 
    
    <logger name="es-logger" level="${ROOTLOGGERLEVEL:-ERROR}" additivity="false">
		<appender name="ES_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
			<encoder>
				<pattern>%msg
				</pattern>  
			</encoder>
		</appender>
	</logger>


    <property   name="LOG_ABSTRACT" value="${LOG_ABSTRACT}" /> 
    <if condition='property("LOG_ABSTRACT").equals("true")'>
        <then>
            <root level="${ROOTLOGGERLEVEL:-ERROR}">
                <appender-ref ref="STDOUT" />
                <appender-ref ref="${APPLICATION_LOG_STORE:-FILE}" />
            </root>
        </then>
    </if>
    <if condition='property("LOG_ABSTRACT").equals("false")'>
        <then>
            <root level="${ROOTLOGGERLEVEL:-ERROR}">
                <appender-ref ref="STDOUT" />
                <appender-ref ref="FILE" />
            </root>
        </then>
    </if>

</configuration>
